=====================================================================
https://docs.nestjs.com/middleware
=====================================================================
[Middleware]
- Middleware is a function which is called before the route handler. 
= Middleware는 the route handler before(보다 먼저) called되는 function이다.
- Middleware functions have access to the request and response objects, 
    and the next() middleware function 
    in the application’s request-response cycle. 
= Middleware functions은 application’s request-response cycle(주기)에서
    request and response objects와 the next() middleware function에
    access할 수 있다.
- The next middleware function is commonly denoted 
    by a variable named next.
= The next middleware function은 commonly(일반적)으로 next라고 named된
    variable(변수)로 denoted(표시)된다.
- Nest middleware are, by default, equivalent to express middleware. 
= Nest middleware는 by default(기본적)으로, express(link) middleware와 
    equivalent(동일)하다.
        !link : https://expressjs.com/en/guide/using-middleware.html!
- The following description from the official express documentation 
    describes the capabilities of middleware:
= official express documentation의 following description(아래 설명)은
    middleware의 capabilities(기능)을 describes(설명)한다.
- Middleware functions can perform the following tasks:
= Middleware functions은 following tasks를 perform할 수 있다.
    - execute any code.
    = any code를 execute한다.
    - make changes to the request and the response objects.
    = request and response object를 make changes한다.
    - end the request-response cycle.
    = request-response cycle(주기)를 종료(end)한다.
    - call the next middleware function in the stack.
    = stack에서 next middleware function은 call한다.
    - if the current middleware function does not end 
        the request-response cycle, 
        it must call next() to pass control 
        to the next middleware function. 
        Otherwise, the request will be left hanging.
    = current middleware function이 request-response cycle를 end 않으면,
        next middleware function에 control을 pass하도록 
        next()를 call해야 한다.
- You implement custom Nest middleware in either a function, 
    or in a class with an @Injectable() decorator. 
= function 또는 @Injectable() decorator가 with(있는) class에서
    custom Nest middleware를 implement(구현)한다.
- The class should implement the NestMiddleware interface, 
    while the function does not have any special requirements. 
= class는 NestMiddleware interface를 implement해야 하는데,
    while(반면에) function는 any special requirements를 가지지 않는다.
- Let's start by implementing a simple middleware feature 
    using the class method.
= class method를 using해서 simple middleware feature을 
    by implementing하는 것으로 start한다.
- WARNING
    Express and fastify handle middleware differently 
        and provide different method signatures, read more here. 
            !https://docs.nestjs.com/techniques/performance#middleware!
= 주의
    Express와 fastify가 middleware를 differently하게 handle(처리)하고
        different method signatures를 provide한다, here(link)를 더 읽어라.
        !link : https://docs.nestjs.com/techniques/performance#middleware!
- ex) logger.middleware.ts
=====================================================================